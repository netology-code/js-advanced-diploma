!function(){"use strict";class e{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,"Character"===new.target.name)throw new Error("dont need create new Character!")}}class t{constructor(t,s){if(!(t instanceof e))throw new Error("character must be instance of Character or its children");if("number"!=typeof s)throw new Error("position must be a number");this.character=t,this.position=s}}class s extends e{constructor(e){if(super(e),this.type="bowman",e>1)for(let t=1;t<=e;t+=1)this.health=100,this.attack=Math.max(this.attack,this.attack*(80+this.health)/100),this.defence=Math.max(this.defence,this.defence*(80+this.health)/100);else this.attack=25,this.defence=25}}class i extends e{constructor(e){if(super(e),this.type="daemon",this.attack=10,this.defence=10,e>1){this.health=100;for(let t=1;t<=e;t+=1)this.health=100,this.attack=Math.max(this.attack,this.attack*(80+this.health)/100),this.defence=Math.max(this.defence,this.defence*(80+this.health)/100)}else this.attack=10,this.defence=10}}class a extends e{constructor(e){super(e),this.type="magician",this.attack=10,this.defence=40}}class h extends e{constructor(e){super(e),this.type="swordsman",this.attack=40,this.defence=10}}class n extends e{constructor(e){if(super(e),this.type="undead",this.attack=40,this.defence=10,e>1){this.health=100;for(let t=1;t<=e;t+=1)this.attack=Math.max(this.attack,this.attack*(80+this.health)/100),this.defence=Math.max(this.defence,this.defence*(80+this.health)/100)}else this.attack=40,this.defence=10}}class r extends e{constructor(e){if(super(e),this.type="vampire",this.attack=25,this.defence=25,e>1){this.health=100;for(let t=1;t<=e;t+=1)this.attack=Math.max(this.attack,this.attack*(80+this.health)/100),this.defence=Math.max(this.defence,this.defence*(80+this.health)/100)}else this.attack=25,this.defence=25}}function l(e,t,l){const o=function*(e,t){for(;;){const l=Math.floor(Math.random()*t.length),o=Math.floor(Math.random()*e)+1;switch(t[l]){case"bowman":yield new s(o);break;case"daemon":yield new i(o);break;case"magician":yield new a(o);break;case"swordsman":yield new h(o);break;case"undead":yield new n(o);break;default:yield new r(o)}}}(e,t),c=[];let d;for(let e=0;e<l;e+=1)d=o.next().value,c.push(d);return c}class o{constructor(e,t,s){this.team={characters:l(e,t,s)}}}class c{from(e){return e}}var d="auto",p="pointer",m="crosshair",u="not-allowed",y=["prairie","desert","arctic","mountain"];const f=new class{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const i=document.createElement("div");i.classList.add("cell","map-tile","map-tile-"+(t=e,s=this.boardSize,0===t?"top-left":t===s-1?"top-right":t<s?"top":t===s**2-1?"bottom-right":t===s**2-s?"bottom-left":t%s==0?"left":(t+1)%s==0?"right":s**2-s<t&&t<s**2?"bottom":"center")),i.addEventListener("mouseenter",(e=>this.onCellEnter(e))),i.addEventListener("mouseleave",(e=>this.onCellLeave(e))),i.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(i)}var t,s;this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const s of e){const e=this.boardEl.children[s.position],i=document.createElement("div");i.classList.add("character",s.character.type);const a=document.createElement("div");a.classList.add("health-level");const h=document.createElement("div");h.classList.add("health-level-indicator","health-level-indicator-"+((t=s.character.health)<15?"critical":t<50?"normal":"high")),h.style.width=`${s.character.health}%`,a.appendChild(h),i.appendChild(a),e.appendChild(i)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((s=>{const i=this.cells[e],a=document.createElement("span");a.textContent=t,a.classList.add("damage"),i.appendChild(a),a.addEventListener("animationend",(()=>{i.removeChild(a),s()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}};f.bindToDOM(document.querySelector("#game-container"));const v=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),g=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.theme=0,this.gameState=new c({}),this.playerTypes=["bowman","swordsman","magician"],this.enemyTypes=["undead","vampire","daemon"],this.characterCount=3,this.nextStep="enemy",this.playerTeam=[],this.enemyTeam=[],this.positions=[],this.prevIndex=null,this.selectedIndex=null,this.characterType=null,this.character=null,this.radiusAttack={bowman:2,vampire:2,swordsman:1,undead:1,magician:4,daemon:4},this.radiusSteps={bowman:2,vampire:2,swordsman:4,undead:4,magician:1,daemon:1}}initPositions(){let e,s,i={},a=[];const h=[],n=[];for(let t=0;t<this.gamePlay.boardSize;t+=1)e=this.gamePlay.boardSize*t,h.push(e,e+1),n.push(e+this.gamePlay.boardSize-2),n.push(e+this.gamePlay.boardSize-1);if(0===this.theme){this.positions=[],this.playerTeam=new o(this.theme+1,this.playerTypes,this.characterCount);for(let e=0;e<this.characterCount;e+=1){do{s=Math.floor(Math.random()*(2*this.gamePlay.boardSize))}while(a.includes(s));a.push(s),i=new t(this.playerTeam.team.characters[e],h[a[e]]),this.positions.push(i)}}else for(let e=0;e<this.positions.length;e+=1){do{s=Math.floor(Math.random()*(2*this.gamePlay.boardSize))}while(a.includes(s));a.push(s),this.positions[e].position=h[a[e]]}a=[],this.enemyTeam=new o(this.theme+1,this.enemyTypes,this.characterCount);for(let e=0;e<this.characterCount;e+=1){do{s=Math.floor(Math.random()*(2*this.gamePlay.boardSize))}while(a.includes(s));a.push(s),i=new t(this.enemyTeam.team.characters[e],n[a[e]]),this.positions.push(i)}return this.positions}init(){document.addEventListener("DOMContentLoaded",(()=>{this.gamePlay.drawUi(y[this.theme]),this.gamePlay.redrawPositions(this.initPositions())})),this.gamePlay.addCellEnterListener((e=>this.onCellEnter(e))),this.gamePlay.addCellClickListener((e=>this.onCellClick(e))),this.gamePlay.addCellLeaveListener((()=>this.onCellLeave(this.selectedIndex))),this.gamePlay.addNewGameListener((e=>this.onNewGameClick(e))),this.gamePlay.addSaveGameListener((e=>this.onSaveGameClick(e))),this.gamePlay.addLoadGameListener((e=>this.onLoadGameClick(e))),this.gameState.from({character:null,nextStep:this.nextStep,prevIndex:null})}nextLevel(){for(let e=0;e<this.positions.length;e+=1)this.positions[e].character.level+=1,this.positions[e].character.health+=80,this.positions[e].character.health>100&&(this.positions[e].character.health=100),this.positions[e].character.attack=Math.max(this.positions[e].character.attack,this.positions[e].character.attack*(80+this.positions[e].character.health)/100),this.positions[e].character.defence=Math.max(this.positions[e].character.defence,this.positions[e].character.defence*(80+this.positions[e].character.health)/100);this.theme<3?this.theme+=1:this.theme=0,this.gamePlay.drawUi(y[this.theme]),this.gamePlay.redrawPositions(this.initPositions())}onCellClick(e){let t,s={};if(s=this.positions.find((t=>t.position===e)),this.positions&&s&&this.playerTypes.includes(s.character.type))null!==this.prevIndex&&this.gamePlay.deselectCell(this.prevIndex),this.gamePlay.selectCell(e),this.gameState.from({character:s,nextStep:this.nextStep,prevIndex:e}),this.prevIndex=this.gameState.from({character:s,nextStep:this.nextStep,prevIndex:e}).prevIndex,this.character=this.gameState.from({character:s,nextStep:this.nextStep,prevIndex:e}).character,this.characterType=this.gameState.from({character:s,nextStep:this.nextStep,prevIndex:e}).character.character.type;else if(0!==this.prevIndex&&!this.prevIndex||s)if((0===this.prevIndex||this.prevIndex)&&s&&this.enemyTypes.includes(s.character.type)&&this.checkRadius(this.radiusAttack[this.characterType],e,this.prevIndex)){if(t=Math.max(this.character.character.attack-s.character.defence,.1*s.character.attack),this.positions[this.positions.indexOf(s)].character.health-=t,this.positions[this.positions.indexOf(s)].character.health<=0&&this.positions.splice(this.positions.indexOf(s),1),this.gamePlay.showDamage(e,t).then((()=>{this.gamePlay.redrawPositions(this.positions)})),this.positions.findIndex((e=>this.enemyTypes.includes(e.character.type)))<0)return void this.nextLevel();this.nextStep="player"}else this.gamePlay.showError("Выберите персонажа игрока");else this.checkRadius(this.radiusSteps[this.characterType],e,this.prevIndex)&&(this.positions[this.positions.indexOf(this.character)].position=e,this.gamePlay.deselectCell(this.prevIndex),this.prevIndex=e,this.gamePlay.selectCell(this.prevIndex),this.gamePlay.redrawPositions(this.positions),this.nextStep="player");"player"===this.nextStep&&(this.enemyStep(),this.nextStep="enemy")}calculateRadius(e,t,s){const i=[];let a=0,h=0;a=(Math.floor(t/e)+1)*e;for(let e=1;e<=s&&t+e<a;e+=1)i.push(t+e);a=Math.floor(t/e)*e;for(let e=1;e<=s&&t-e>=a;e+=1)i.push(t-e);h=e*e;for(let a=1;a<=s&&t+a*e<h;a+=1)i.push(t+a*e);h=0;for(let a=1;a<=s&&t-a*e>=h;a+=1)i.push(t-a*e);a=(Math.floor(t/e)+1)*e,h=e*e;for(let n=1;n<=s&&t+n<a&&t+n*e<h;n+=1)i.push(t+n+n*e);a=Math.floor(t/e)*e,h=e*e;for(let n=1;n<=s&&t-n>=a&&t+n*e<h;n+=1)i.push(t-n+n*e);a=(Math.floor(t/e)+1)*e,h=0;for(let n=1;n<=s&&t+n<a&&t-n*e>=h;n+=1)i.push(t+n-n*e);a=Math.floor(t/e)*e,h=0;for(let n=1;n<=s&&t-n>=a&&t-n*e>=h;n+=1)i.push(t-n-n*e);return i}checkRadius(e,t,s){let i=!1;return this.calculateRadius(this.gamePlay.boardSize,s,e).includes(t)&&(i=!0),i}enemyStep(){let e=null,t={},s={},i=[],a=[],h={},n=null,r=!1,l=!1,o=!1;for(let i=0;i<this.positions.length;i+=1)if(this.enemyTypes.includes(this.positions[i].character.type)){t=this.positions[i],e=this.positions[i].position,s=this.positions[i].character;break}if(s&&(i=this.calculateRadius(this.gamePlay.boardSize,e,this.radiusAttack[s.type]),0!==i.length)){for(let e=0;e<i.length;e+=1){if(h=this.positions.find((t=>t.position===i[e])),h&&this.playerTypes.includes(h.character.type)){if(n=Math.max(s.attack-h.character.defence,.1*s.attack),this.positions[this.positions.indexOf(h)].character.health-=n,this.positions[this.positions.indexOf(h)].character.health<=0){if(this.positions.splice(this.positions.indexOf(h),1),this.positions.findIndex((e=>this.playerTypes.includes(e.character.type)))<0)return this.theme=0,this.gamePlay.drawUi(y[this.theme]),void this.gamePlay.redrawPositions(this.initPositions());null!==this.prevIndex&&this.gamePlay.deselectCell(this.prevIndex),this.gamePlay.setCursor(d),this.prevIndex=null}this.gamePlay.showDamage(i[e],n).then((()=>{this.gamePlay.redrawPositions(this.positions)}));break}e===i.length-1&&(l=!0)}if(l){l=!1,h={},a=this.calculateRadius(this.gamePlay.boardSize,e,this.radiusSteps[s.type]);for(let e=0;e<a.length;e+=1){if(i=this.calculateRadius(this.gamePlay.boardSize,a[e],this.radiusAttack[s.type]),0!==i.length){for(let s=0;s<i.length;s+=1)if(h=this.positions.find((e=>e.position===i[s])),h&&this.playerTypes.includes(h.character.type)&&-1===this.positions.findIndex((t=>t.position===a[e]))){this.positions[this.positions.indexOf(t)].position=a[e],setTimeout((()=>{this.gamePlay.redrawPositions(this.positions)}),1e3),r=!0;break}if(r)break}e===a.length-1&&(o=!0)}o&&(this.positions[this.positions.indexOf(t)].position-=1,setTimeout((()=>{this.gamePlay.redrawPositions(this.positions)}),1e3))}}}onCellEnter(e){let t="";const s=this.positions.find((t=>t.position===e));this.positions&&s&&(t=`🎖 ${s.character.level} ⚔ ${s.character.attack} 🛡 ${s.character.defence} ❤ ${s.character.health}`,this.gamePlay.showCellTooltip(t,e)),(0===this.prevIndex||this.prevIndex)&&(s&&this.playerTypes.includes(s.character.type)?this.gamePlay.setCursor(p):s&&this.enemyTypes.includes(s.character.type)?this.checkRadius(this.radiusAttack[this.characterType],e,this.prevIndex)?(null!==this.selectedIndex&&this.gamePlay.deselectCell(this.selectedIndex),this.gamePlay.setCursor(m),this.gamePlay.selectCell(e,"red"),this.selectedIndex=e):this.gamePlay.setCursor(u):this.checkRadius(this.radiusSteps[this.characterType],e,this.prevIndex)?(null!==this.selectedIndex&&this.gamePlay.deselectCell(this.selectedIndex),this.gamePlay.setCursor(p),this.gamePlay.selectCell(e,"green"),this.selectedIndex=e):this.gamePlay.setCursor(d))}onCellLeave(e){e&&this.gamePlay.deselectCell(e)}onNewGameClick(e){this.theme=0,this.gamePlay.drawUi(y[this.theme]),this.gamePlay.redrawPositions(this.initPositions())}onSaveGameClick(e){const t={theme:this.theme,nextStep:this.nextStep,positions:this.positions,prevIndex:this.prevIndex,selectedIndex:this.selectedIndex,characterType:this.characterType,character:this.character};this.stateService.save(t)}onLoadGameClick(e){const t=this.stateService.load();this.theme=t.theme,this.nextStep=t.nextStep,this.positions=t.positions,this.prevIndex=t.prevIndex,this.selectedIndex=t.selectedIndex,this.characterType=t.characterType,this.character=t.character,this.gamePlay.redrawPositions(this.positions)}}(f,v);g.init()}();